// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: analyzers.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalyzerOptions_NullBehaviour int32

const (
	AnalyzerOptions_Ignore      AnalyzerOptions_NullBehaviour = 0
	AnalyzerOptions_EmptyString AnalyzerOptions_NullBehaviour = 1
	AnalyzerOptions_Fail        AnalyzerOptions_NullBehaviour = 2
)

// Enum value maps for AnalyzerOptions_NullBehaviour.
var (
	AnalyzerOptions_NullBehaviour_name = map[int32]string{
		0: "Ignore",
		1: "EmptyString",
		2: "Fail",
	}
	AnalyzerOptions_NullBehaviour_value = map[string]int32{
		"Ignore":      0,
		"EmptyString": 1,
		"Fail":        2,
	}
)

func (x AnalyzerOptions_NullBehaviour) Enum() *AnalyzerOptions_NullBehaviour {
	p := new(AnalyzerOptions_NullBehaviour)
	*p = x
	return p
}

func (x AnalyzerOptions_NullBehaviour) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalyzerOptions_NullBehaviour) Descriptor() protoreflect.EnumDescriptor {
	return file_analyzers_proto_enumTypes[0].Descriptor()
}

func (AnalyzerOptions_NullBehaviour) Type() protoreflect.EnumType {
	return &file_analyzers_proto_enumTypes[0]
}

func (x AnalyzerOptions_NullBehaviour) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalyzerOptions_NullBehaviour.Descriptor instead.
func (AnalyzerOptions_NullBehaviour) EnumDescriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{1, 0}
}

type AnalyzerOptions_FilteredRowOutcome int32

const (
	AnalyzerOptions_NULL AnalyzerOptions_FilteredRowOutcome = 0
	AnalyzerOptions_TRUE AnalyzerOptions_FilteredRowOutcome = 1
)

// Enum value maps for AnalyzerOptions_FilteredRowOutcome.
var (
	AnalyzerOptions_FilteredRowOutcome_name = map[int32]string{
		0: "NULL",
		1: "TRUE",
	}
	AnalyzerOptions_FilteredRowOutcome_value = map[string]int32{
		"NULL": 0,
		"TRUE": 1,
	}
)

func (x AnalyzerOptions_FilteredRowOutcome) Enum() *AnalyzerOptions_FilteredRowOutcome {
	p := new(AnalyzerOptions_FilteredRowOutcome)
	*p = x
	return p
}

func (x AnalyzerOptions_FilteredRowOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalyzerOptions_FilteredRowOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_analyzers_proto_enumTypes[1].Descriptor()
}

func (AnalyzerOptions_FilteredRowOutcome) Type() protoreflect.EnumType {
	return &file_analyzers_proto_enumTypes[1]
}

func (x AnalyzerOptions_FilteredRowOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalyzerOptions_FilteredRowOutcome.Descriptor instead.
func (AnalyzerOptions_FilteredRowOutcome) EnumDescriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{1, 1}
}

type Histogram_AggregateFunction int32

const (
	Histogram_Count Histogram_AggregateFunction = 0
	Histogram_Sum   Histogram_AggregateFunction = 1
)

// Enum value maps for Histogram_AggregateFunction.
var (
	Histogram_AggregateFunction_name = map[int32]string{
		0: "Count",
		1: "Sum",
	}
	Histogram_AggregateFunction_value = map[string]int32{
		"Count": 0,
		"Sum":   1,
	}
)

func (x Histogram_AggregateFunction) Enum() *Histogram_AggregateFunction {
	p := new(Histogram_AggregateFunction)
	*p = x
	return p
}

func (x Histogram_AggregateFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Histogram_AggregateFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_analyzers_proto_enumTypes[2].Descriptor()
}

func (Histogram_AggregateFunction) Type() protoreflect.EnumType {
	return &file_analyzers_proto_enumTypes[2]
}

func (x Histogram_AggregateFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Histogram_AggregateFunction.Descriptor instead.
func (Histogram_AggregateFunction) EnumDescriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{15, 0}
}

type Analyzer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not all the analyzers are compatible with AnomalyDetection!
	//
	// Types that are assignable to Analyzer:
	//
	//	*Analyzer_ApproxCountDistinct
	//	*Analyzer_ApproxQuantile
	//	*Analyzer_ApproxQuantiles
	//	*Analyzer_ColumnCount
	//	*Analyzer_Completeness
	//	*Analyzer_Compliance
	//	*Analyzer_Correlation
	//	*Analyzer_CountDistinct
	//	*Analyzer_CustomSql
	//	*Analyzer_DataType
	//	*Analyzer_Distinctness
	//	*Analyzer_Entropy
	//	*Analyzer_ExactQuantile
	//	*Analyzer_Histogram
	//	*Analyzer_KllSketch
	//	*Analyzer_MaxLength
	//	*Analyzer_Maximum
	//	*Analyzer_Mean
	//	*Analyzer_MinLength
	//	*Analyzer_Minimum
	//	*Analyzer_MutualInformation
	//	*Analyzer_PatternMatch
	//	*Analyzer_RatioOfSums
	//	*Analyzer_Size
	//	*Analyzer_StandardDeviation
	//	*Analyzer_Sum
	//	*Analyzer_UniqueValueRatio
	//	*Analyzer_Uniqueness
	Analyzer isAnalyzer_Analyzer `protobuf_oneof:"analyzer"`
}

func (x *Analyzer) Reset() {
	*x = Analyzer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analyzer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analyzer) ProtoMessage() {}

func (x *Analyzer) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analyzer.ProtoReflect.Descriptor instead.
func (*Analyzer) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{0}
}

func (m *Analyzer) GetAnalyzer() isAnalyzer_Analyzer {
	if m != nil {
		return m.Analyzer
	}
	return nil
}

func (x *Analyzer) GetApproxCountDistinct() *ApproxCountDistinct {
	if x, ok := x.GetAnalyzer().(*Analyzer_ApproxCountDistinct); ok {
		return x.ApproxCountDistinct
	}
	return nil
}

func (x *Analyzer) GetApproxQuantile() *ApproxQuantile {
	if x, ok := x.GetAnalyzer().(*Analyzer_ApproxQuantile); ok {
		return x.ApproxQuantile
	}
	return nil
}

func (x *Analyzer) GetApproxQuantiles() *ApproxQuantiles {
	if x, ok := x.GetAnalyzer().(*Analyzer_ApproxQuantiles); ok {
		return x.ApproxQuantiles
	}
	return nil
}

func (x *Analyzer) GetColumnCount() *ColumnCount {
	if x, ok := x.GetAnalyzer().(*Analyzer_ColumnCount); ok {
		return x.ColumnCount
	}
	return nil
}

func (x *Analyzer) GetCompleteness() *Completeness {
	if x, ok := x.GetAnalyzer().(*Analyzer_Completeness); ok {
		return x.Completeness
	}
	return nil
}

func (x *Analyzer) GetCompliance() *Compliance {
	if x, ok := x.GetAnalyzer().(*Analyzer_Compliance); ok {
		return x.Compliance
	}
	return nil
}

func (x *Analyzer) GetCorrelation() *Correlation {
	if x, ok := x.GetAnalyzer().(*Analyzer_Correlation); ok {
		return x.Correlation
	}
	return nil
}

func (x *Analyzer) GetCountDistinct() *CountDistinct {
	if x, ok := x.GetAnalyzer().(*Analyzer_CountDistinct); ok {
		return x.CountDistinct
	}
	return nil
}

func (x *Analyzer) GetCustomSql() *CustomSql {
	if x, ok := x.GetAnalyzer().(*Analyzer_CustomSql); ok {
		return x.CustomSql
	}
	return nil
}

func (x *Analyzer) GetDataType() *DataType {
	if x, ok := x.GetAnalyzer().(*Analyzer_DataType); ok {
		return x.DataType
	}
	return nil
}

func (x *Analyzer) GetDistinctness() *Distinctness {
	if x, ok := x.GetAnalyzer().(*Analyzer_Distinctness); ok {
		return x.Distinctness
	}
	return nil
}

func (x *Analyzer) GetEntropy() *Entropy {
	if x, ok := x.GetAnalyzer().(*Analyzer_Entropy); ok {
		return x.Entropy
	}
	return nil
}

func (x *Analyzer) GetExactQuantile() *ExactQuantile {
	if x, ok := x.GetAnalyzer().(*Analyzer_ExactQuantile); ok {
		return x.ExactQuantile
	}
	return nil
}

func (x *Analyzer) GetHistogram() *Histogram {
	if x, ok := x.GetAnalyzer().(*Analyzer_Histogram); ok {
		return x.Histogram
	}
	return nil
}

func (x *Analyzer) GetKllSketch() *KLLSketch {
	if x, ok := x.GetAnalyzer().(*Analyzer_KllSketch); ok {
		return x.KllSketch
	}
	return nil
}

func (x *Analyzer) GetMaxLength() *MaxLength {
	if x, ok := x.GetAnalyzer().(*Analyzer_MaxLength); ok {
		return x.MaxLength
	}
	return nil
}

func (x *Analyzer) GetMaximum() *Maximum {
	if x, ok := x.GetAnalyzer().(*Analyzer_Maximum); ok {
		return x.Maximum
	}
	return nil
}

func (x *Analyzer) GetMean() *Mean {
	if x, ok := x.GetAnalyzer().(*Analyzer_Mean); ok {
		return x.Mean
	}
	return nil
}

func (x *Analyzer) GetMinLength() *MinLength {
	if x, ok := x.GetAnalyzer().(*Analyzer_MinLength); ok {
		return x.MinLength
	}
	return nil
}

func (x *Analyzer) GetMinimum() *Minimum {
	if x, ok := x.GetAnalyzer().(*Analyzer_Minimum); ok {
		return x.Minimum
	}
	return nil
}

func (x *Analyzer) GetMutualInformation() *MutualInformation {
	if x, ok := x.GetAnalyzer().(*Analyzer_MutualInformation); ok {
		return x.MutualInformation
	}
	return nil
}

func (x *Analyzer) GetPatternMatch() *PatternMatch {
	if x, ok := x.GetAnalyzer().(*Analyzer_PatternMatch); ok {
		return x.PatternMatch
	}
	return nil
}

func (x *Analyzer) GetRatioOfSums() *RatioOfSums {
	if x, ok := x.GetAnalyzer().(*Analyzer_RatioOfSums); ok {
		return x.RatioOfSums
	}
	return nil
}

func (x *Analyzer) GetSize() *Size {
	if x, ok := x.GetAnalyzer().(*Analyzer_Size); ok {
		return x.Size
	}
	return nil
}

func (x *Analyzer) GetStandardDeviation() *StandardDeviation {
	if x, ok := x.GetAnalyzer().(*Analyzer_StandardDeviation); ok {
		return x.StandardDeviation
	}
	return nil
}

func (x *Analyzer) GetSum() *Sum {
	if x, ok := x.GetAnalyzer().(*Analyzer_Sum); ok {
		return x.Sum
	}
	return nil
}

func (x *Analyzer) GetUniqueValueRatio() *UniqueValueRatio {
	if x, ok := x.GetAnalyzer().(*Analyzer_UniqueValueRatio); ok {
		return x.UniqueValueRatio
	}
	return nil
}

func (x *Analyzer) GetUniqueness() *Uniqueness {
	if x, ok := x.GetAnalyzer().(*Analyzer_Uniqueness); ok {
		return x.Uniqueness
	}
	return nil
}

type isAnalyzer_Analyzer interface {
	isAnalyzer_Analyzer()
}

type Analyzer_ApproxCountDistinct struct {
	ApproxCountDistinct *ApproxCountDistinct `protobuf:"bytes,1,opt,name=approx_count_distinct,json=approxCountDistinct,proto3,oneof"`
}

type Analyzer_ApproxQuantile struct {
	ApproxQuantile *ApproxQuantile `protobuf:"bytes,2,opt,name=approx_quantile,json=approxQuantile,proto3,oneof"`
}

type Analyzer_ApproxQuantiles struct {
	ApproxQuantiles *ApproxQuantiles `protobuf:"bytes,3,opt,name=approx_quantiles,json=approxQuantiles,proto3,oneof"`
}

type Analyzer_ColumnCount struct {
	ColumnCount *ColumnCount `protobuf:"bytes,4,opt,name=column_count,json=columnCount,proto3,oneof"`
}

type Analyzer_Completeness struct {
	Completeness *Completeness `protobuf:"bytes,5,opt,name=completeness,proto3,oneof"`
}

type Analyzer_Compliance struct {
	Compliance *Compliance `protobuf:"bytes,6,opt,name=compliance,proto3,oneof"`
}

type Analyzer_Correlation struct {
	Correlation *Correlation `protobuf:"bytes,7,opt,name=correlation,proto3,oneof"`
}

type Analyzer_CountDistinct struct {
	CountDistinct *CountDistinct `protobuf:"bytes,8,opt,name=count_distinct,json=countDistinct,proto3,oneof"`
}

type Analyzer_CustomSql struct {
	CustomSql *CustomSql `protobuf:"bytes,9,opt,name=custom_sql,json=customSql,proto3,oneof"`
}

type Analyzer_DataType struct {
	DataType *DataType `protobuf:"bytes,10,opt,name=data_type,json=dataType,proto3,oneof"`
}

type Analyzer_Distinctness struct {
	Distinctness *Distinctness `protobuf:"bytes,11,opt,name=distinctness,proto3,oneof"`
}

type Analyzer_Entropy struct {
	Entropy *Entropy `protobuf:"bytes,12,opt,name=entropy,proto3,oneof"`
}

type Analyzer_ExactQuantile struct {
	ExactQuantile *ExactQuantile `protobuf:"bytes,13,opt,name=exact_quantile,json=exactQuantile,proto3,oneof"`
}

type Analyzer_Histogram struct {
	Histogram *Histogram `protobuf:"bytes,14,opt,name=histogram,proto3,oneof"`
}

type Analyzer_KllSketch struct {
	KllSketch *KLLSketch `protobuf:"bytes,15,opt,name=kll_sketch,json=kllSketch,proto3,oneof"`
}

type Analyzer_MaxLength struct {
	MaxLength *MaxLength `protobuf:"bytes,16,opt,name=max_length,json=maxLength,proto3,oneof"`
}

type Analyzer_Maximum struct {
	Maximum *Maximum `protobuf:"bytes,17,opt,name=maximum,proto3,oneof"`
}

type Analyzer_Mean struct {
	Mean *Mean `protobuf:"bytes,18,opt,name=mean,proto3,oneof"`
}

type Analyzer_MinLength struct {
	MinLength *MinLength `protobuf:"bytes,19,opt,name=min_length,json=minLength,proto3,oneof"`
}

type Analyzer_Minimum struct {
	Minimum *Minimum `protobuf:"bytes,20,opt,name=minimum,proto3,oneof"`
}

type Analyzer_MutualInformation struct {
	MutualInformation *MutualInformation `protobuf:"bytes,21,opt,name=mutual_information,json=mutualInformation,proto3,oneof"`
}

type Analyzer_PatternMatch struct {
	PatternMatch *PatternMatch `protobuf:"bytes,22,opt,name=pattern_match,json=patternMatch,proto3,oneof"`
}

type Analyzer_RatioOfSums struct {
	RatioOfSums *RatioOfSums `protobuf:"bytes,23,opt,name=ratio_of_sums,json=ratioOfSums,proto3,oneof"`
}

type Analyzer_Size struct {
	Size *Size `protobuf:"bytes,24,opt,name=size,proto3,oneof"`
}

type Analyzer_StandardDeviation struct {
	StandardDeviation *StandardDeviation `protobuf:"bytes,25,opt,name=standard_deviation,json=standardDeviation,proto3,oneof"`
}

type Analyzer_Sum struct {
	Sum *Sum `protobuf:"bytes,26,opt,name=sum,proto3,oneof"`
}

type Analyzer_UniqueValueRatio struct {
	UniqueValueRatio *UniqueValueRatio `protobuf:"bytes,27,opt,name=unique_value_ratio,json=uniqueValueRatio,proto3,oneof"`
}

type Analyzer_Uniqueness struct {
	Uniqueness *Uniqueness `protobuf:"bytes,28,opt,name=uniqueness,proto3,oneof"`
}

func (*Analyzer_ApproxCountDistinct) isAnalyzer_Analyzer() {}

func (*Analyzer_ApproxQuantile) isAnalyzer_Analyzer() {}

func (*Analyzer_ApproxQuantiles) isAnalyzer_Analyzer() {}

func (*Analyzer_ColumnCount) isAnalyzer_Analyzer() {}

func (*Analyzer_Completeness) isAnalyzer_Analyzer() {}

func (*Analyzer_Compliance) isAnalyzer_Analyzer() {}

func (*Analyzer_Correlation) isAnalyzer_Analyzer() {}

func (*Analyzer_CountDistinct) isAnalyzer_Analyzer() {}

func (*Analyzer_CustomSql) isAnalyzer_Analyzer() {}

func (*Analyzer_DataType) isAnalyzer_Analyzer() {}

func (*Analyzer_Distinctness) isAnalyzer_Analyzer() {}

func (*Analyzer_Entropy) isAnalyzer_Analyzer() {}

func (*Analyzer_ExactQuantile) isAnalyzer_Analyzer() {}

func (*Analyzer_Histogram) isAnalyzer_Analyzer() {}

func (*Analyzer_KllSketch) isAnalyzer_Analyzer() {}

func (*Analyzer_MaxLength) isAnalyzer_Analyzer() {}

func (*Analyzer_Maximum) isAnalyzer_Analyzer() {}

func (*Analyzer_Mean) isAnalyzer_Analyzer() {}

func (*Analyzer_MinLength) isAnalyzer_Analyzer() {}

func (*Analyzer_Minimum) isAnalyzer_Analyzer() {}

func (*Analyzer_MutualInformation) isAnalyzer_Analyzer() {}

func (*Analyzer_PatternMatch) isAnalyzer_Analyzer() {}

func (*Analyzer_RatioOfSums) isAnalyzer_Analyzer() {}

func (*Analyzer_Size) isAnalyzer_Analyzer() {}

func (*Analyzer_StandardDeviation) isAnalyzer_Analyzer() {}

func (*Analyzer_Sum) isAnalyzer_Analyzer() {}

func (*Analyzer_UniqueValueRatio) isAnalyzer_Analyzer() {}

func (*Analyzer_Uniqueness) isAnalyzer_Analyzer() {}

type AnalyzerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NullBehaviour      AnalyzerOptions_NullBehaviour      `protobuf:"varint,1,opt,name=null_behaviour,json=nullBehaviour,proto3,enum=com.ssinchenko.proto.AnalyzerOptions_NullBehaviour" json:"null_behaviour,omitempty"`
	FilteredRowOutcome AnalyzerOptions_FilteredRowOutcome `protobuf:"varint,2,opt,name=filtered_row_outcome,json=filteredRowOutcome,proto3,enum=com.ssinchenko.proto.AnalyzerOptions_FilteredRowOutcome" json:"filtered_row_outcome,omitempty"`
}

func (x *AnalyzerOptions) Reset() {
	*x = AnalyzerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzerOptions) ProtoMessage() {}

func (x *AnalyzerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzerOptions.ProtoReflect.Descriptor instead.
func (*AnalyzerOptions) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyzerOptions) GetNullBehaviour() AnalyzerOptions_NullBehaviour {
	if x != nil {
		return x.NullBehaviour
	}
	return AnalyzerOptions_Ignore
}

func (x *AnalyzerOptions) GetFilteredRowOutcome() AnalyzerOptions_FilteredRowOutcome {
	if x != nil {
		return x.FilteredRowOutcome
	}
	return AnalyzerOptions_NULL
}

type ApproxCountDistinct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string  `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where  *string `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *ApproxCountDistinct) Reset() {
	*x = ApproxCountDistinct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproxCountDistinct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproxCountDistinct) ProtoMessage() {}

func (x *ApproxCountDistinct) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproxCountDistinct.ProtoReflect.Descriptor instead.
func (*ApproxCountDistinct) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{2}
}

func (x *ApproxCountDistinct) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ApproxCountDistinct) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type ApproxQuantile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column        string   `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Quantile      float64  `protobuf:"fixed64,2,opt,name=quantile,proto3" json:"quantile,omitempty"`
	RelativeError *float64 `protobuf:"fixed64,3,opt,name=relative_error,json=relativeError,proto3,oneof" json:"relative_error,omitempty"`
	Where         *string  `protobuf:"bytes,4,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *ApproxQuantile) Reset() {
	*x = ApproxQuantile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproxQuantile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproxQuantile) ProtoMessage() {}

func (x *ApproxQuantile) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproxQuantile.ProtoReflect.Descriptor instead.
func (*ApproxQuantile) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{3}
}

func (x *ApproxQuantile) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ApproxQuantile) GetQuantile() float64 {
	if x != nil {
		return x.Quantile
	}
	return 0
}

func (x *ApproxQuantile) GetRelativeError() float64 {
	if x != nil && x.RelativeError != nil {
		return *x.RelativeError
	}
	return 0
}

func (x *ApproxQuantile) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type ApproxQuantiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column        string    `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Quantiles     []float64 `protobuf:"fixed64,2,rep,packed,name=quantiles,proto3" json:"quantiles,omitempty"`
	RelativeError *float64  `protobuf:"fixed64,3,opt,name=relative_error,json=relativeError,proto3,oneof" json:"relative_error,omitempty"`
}

func (x *ApproxQuantiles) Reset() {
	*x = ApproxQuantiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproxQuantiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproxQuantiles) ProtoMessage() {}

func (x *ApproxQuantiles) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproxQuantiles.ProtoReflect.Descriptor instead.
func (*ApproxQuantiles) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{4}
}

func (x *ApproxQuantiles) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ApproxQuantiles) GetQuantiles() []float64 {
	if x != nil {
		return x.Quantiles
	}
	return nil
}

func (x *ApproxQuantiles) GetRelativeError() float64 {
	if x != nil && x.RelativeError != nil {
		return *x.RelativeError
	}
	return 0
}

type ColumnCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ColumnCount) Reset() {
	*x = ColumnCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnCount) ProtoMessage() {}

func (x *ColumnCount) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnCount.ProtoReflect.Descriptor instead.
func (*ColumnCount) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{5}
}

type Completeness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column  string           `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where   *string          `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
	Options *AnalyzerOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *Completeness) Reset() {
	*x = Completeness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completeness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completeness) ProtoMessage() {}

func (x *Completeness) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completeness.ProtoReflect.Descriptor instead.
func (*Completeness) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{6}
}

func (x *Completeness) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Completeness) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *Completeness) GetOptions() *AnalyzerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Compliance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance  string           `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Predicate string           `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Where     *string          `protobuf:"bytes,3,opt,name=where,proto3,oneof" json:"where,omitempty"`
	Columns   []string         `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	Options   *AnalyzerOptions `protobuf:"bytes,5,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *Compliance) Reset() {
	*x = Compliance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compliance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compliance) ProtoMessage() {}

func (x *Compliance) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compliance.ProtoReflect.Descriptor instead.
func (*Compliance) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{7}
}

func (x *Compliance) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Compliance) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *Compliance) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *Compliance) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Compliance) GetOptions() *AnalyzerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Correlation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstColumn  string  `protobuf:"bytes,1,opt,name=first_column,json=firstColumn,proto3" json:"first_column,omitempty"`
	SecondColumn string  `protobuf:"bytes,2,opt,name=second_column,json=secondColumn,proto3" json:"second_column,omitempty"`
	Where        *string `protobuf:"bytes,3,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *Correlation) Reset() {
	*x = Correlation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Correlation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Correlation) ProtoMessage() {}

func (x *Correlation) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Correlation.ProtoReflect.Descriptor instead.
func (*Correlation) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{8}
}

func (x *Correlation) GetFirstColumn() string {
	if x != nil {
		return x.FirstColumn
	}
	return ""
}

func (x *Correlation) GetSecondColumn() string {
	if x != nil {
		return x.SecondColumn
	}
	return ""
}

func (x *Correlation) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type CountDistinct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *CountDistinct) Reset() {
	*x = CountDistinct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDistinct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDistinct) ProtoMessage() {}

func (x *CountDistinct) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDistinct.ProtoReflect.Descriptor instead.
func (*CountDistinct) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{9}
}

func (x *CountDistinct) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

type CustomSql struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions string `protobuf:"bytes,1,opt,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *CustomSql) Reset() {
	*x = CustomSql{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomSql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomSql) ProtoMessage() {}

func (x *CustomSql) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomSql.ProtoReflect.Descriptor instead.
func (*CustomSql) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{10}
}

func (x *CustomSql) GetExpressions() string {
	if x != nil {
		return x.Expressions
	}
	return ""
}

// TODO: This one looks broken; todo revisit the code of Deequ
type DataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string  `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where  *string `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *DataType) Reset() {
	*x = DataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataType) ProtoMessage() {}

func (x *DataType) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataType.ProtoReflect.Descriptor instead.
func (*DataType) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{11}
}

func (x *DataType) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *DataType) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type Distinctness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Where   *string  `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *Distinctness) Reset() {
	*x = Distinctness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distinctness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distinctness) ProtoMessage() {}

func (x *Distinctness) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distinctness.ProtoReflect.Descriptor instead.
func (*Distinctness) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{12}
}

func (x *Distinctness) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Distinctness) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type Entropy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string  `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where  *string `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *Entropy) Reset() {
	*x = Entropy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entropy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entropy) ProtoMessage() {}

func (x *Entropy) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entropy.ProtoReflect.Descriptor instead.
func (*Entropy) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{13}
}

func (x *Entropy) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Entropy) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type ExactQuantile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column   string  `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Quantile float64 `protobuf:"fixed64,2,opt,name=quantile,proto3" json:"quantile,omitempty"`
	Where    *string `protobuf:"bytes,3,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *ExactQuantile) Reset() {
	*x = ExactQuantile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExactQuantile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExactQuantile) ProtoMessage() {}

func (x *ExactQuantile) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExactQuantile.ProtoReflect.Descriptor instead.
func (*ExactQuantile) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{14}
}

func (x *ExactQuantile) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ExactQuantile) GetQuantile() float64 {
	if x != nil {
		return x.Quantile
	}
	return 0
}

func (x *ExactQuantile) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type Histogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	// TODO: binningUdf; how to serialize it?
	MaxDetailBins             *int32                       `protobuf:"varint,2,opt,name=max_detail_bins,json=maxDetailBins,proto3,oneof" json:"max_detail_bins,omitempty"`
	Where                     *string                      `protobuf:"bytes,3,opt,name=where,proto3,oneof" json:"where,omitempty"`
	ComputeFrequenciesAsRatio *bool                        `protobuf:"varint,4,opt,name=compute_frequencies_as_ratio,json=computeFrequenciesAsRatio,proto3,oneof" json:"compute_frequencies_as_ratio,omitempty"`
	AggregateFunction         *Histogram_AggregateFunction `protobuf:"varint,5,opt,name=aggregate_function,json=aggregateFunction,proto3,enum=com.ssinchenko.proto.Histogram_AggregateFunction,oneof" json:"aggregate_function,omitempty"`
}

func (x *Histogram) Reset() {
	*x = Histogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram) ProtoMessage() {}

func (x *Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram.ProtoReflect.Descriptor instead.
func (*Histogram) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{15}
}

func (x *Histogram) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Histogram) GetMaxDetailBins() int32 {
	if x != nil && x.MaxDetailBins != nil {
		return *x.MaxDetailBins
	}
	return 0
}

func (x *Histogram) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *Histogram) GetComputeFrequenciesAsRatio() bool {
	if x != nil && x.ComputeFrequenciesAsRatio != nil {
		return *x.ComputeFrequenciesAsRatio
	}
	return false
}

func (x *Histogram) GetAggregateFunction() Histogram_AggregateFunction {
	if x != nil && x.AggregateFunction != nil {
		return *x.AggregateFunction
	}
	return Histogram_Count
}

type KLLSketch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column        string                   `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	KllParameters *KLLSketch_KLLParameters `protobuf:"bytes,2,opt,name=kll_parameters,json=kllParameters,proto3,oneof" json:"kll_parameters,omitempty"`
}

func (x *KLLSketch) Reset() {
	*x = KLLSketch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KLLSketch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KLLSketch) ProtoMessage() {}

func (x *KLLSketch) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KLLSketch.ProtoReflect.Descriptor instead.
func (*KLLSketch) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{16}
}

func (x *KLLSketch) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *KLLSketch) GetKllParameters() *KLLSketch_KLLParameters {
	if x != nil {
		return x.KllParameters
	}
	return nil
}

type MaxLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column  string           `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where   *string          `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
	Options *AnalyzerOptions `protobuf:"bytes,3,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *MaxLength) Reset() {
	*x = MaxLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxLength) ProtoMessage() {}

func (x *MaxLength) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxLength.ProtoReflect.Descriptor instead.
func (*MaxLength) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{17}
}

func (x *MaxLength) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *MaxLength) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *MaxLength) GetOptions() *AnalyzerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Maximum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column  string           `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where   *string          `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
	Options *AnalyzerOptions `protobuf:"bytes,3,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *Maximum) Reset() {
	*x = Maximum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maximum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maximum) ProtoMessage() {}

func (x *Maximum) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maximum.ProtoReflect.Descriptor instead.
func (*Maximum) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{18}
}

func (x *Maximum) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Maximum) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *Maximum) GetOptions() *AnalyzerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Mean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string  `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where  *string `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *Mean) Reset() {
	*x = Mean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mean) ProtoMessage() {}

func (x *Mean) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mean.ProtoReflect.Descriptor instead.
func (*Mean) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{19}
}

func (x *Mean) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Mean) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type MinLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column  string           `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where   *string          `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
	Options *AnalyzerOptions `protobuf:"bytes,3,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *MinLength) Reset() {
	*x = MinLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinLength) ProtoMessage() {}

func (x *MinLength) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinLength.ProtoReflect.Descriptor instead.
func (*MinLength) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{20}
}

func (x *MinLength) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *MinLength) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *MinLength) GetOptions() *AnalyzerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Minimum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column  string           `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where   *string          `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
	Options *AnalyzerOptions `protobuf:"bytes,3,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *Minimum) Reset() {
	*x = Minimum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Minimum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Minimum) ProtoMessage() {}

func (x *Minimum) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Minimum.ProtoReflect.Descriptor instead.
func (*Minimum) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{21}
}

func (x *Minimum) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Minimum) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *Minimum) GetOptions() *AnalyzerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type MutualInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Where   *string  `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *MutualInformation) Reset() {
	*x = MutualInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutualInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutualInformation) ProtoMessage() {}

func (x *MutualInformation) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutualInformation.ProtoReflect.Descriptor instead.
func (*MutualInformation) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{22}
}

func (x *MutualInformation) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *MutualInformation) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type PatternMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column  string           `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Pattern string           `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"` // scala.util.matching.Regex in Deequ; passed as is
	Where   *string          `protobuf:"bytes,3,opt,name=where,proto3,oneof" json:"where,omitempty"`
	Options *AnalyzerOptions `protobuf:"bytes,4,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *PatternMatch) Reset() {
	*x = PatternMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternMatch) ProtoMessage() {}

func (x *PatternMatch) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternMatch.ProtoReflect.Descriptor instead.
func (*PatternMatch) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{23}
}

func (x *PatternMatch) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *PatternMatch) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *PatternMatch) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *PatternMatch) GetOptions() *AnalyzerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type RatioOfSums struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numerator   string  `protobuf:"bytes,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator string  `protobuf:"bytes,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
	Where       *string `protobuf:"bytes,3,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *RatioOfSums) Reset() {
	*x = RatioOfSums{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatioOfSums) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatioOfSums) ProtoMessage() {}

func (x *RatioOfSums) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatioOfSums.ProtoReflect.Descriptor instead.
func (*RatioOfSums) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{24}
}

func (x *RatioOfSums) GetNumerator() string {
	if x != nil {
		return x.Numerator
	}
	return ""
}

func (x *RatioOfSums) GetDenominator() string {
	if x != nil {
		return x.Denominator
	}
	return ""
}

func (x *RatioOfSums) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Where *string `protobuf:"bytes,1,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *Size) Reset() {
	*x = Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Size) ProtoMessage() {}

func (x *Size) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Size.ProtoReflect.Descriptor instead.
func (*Size) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{25}
}

func (x *Size) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type StandardDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string  `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where  *string `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *StandardDeviation) Reset() {
	*x = StandardDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardDeviation) ProtoMessage() {}

func (x *StandardDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardDeviation.ProtoReflect.Descriptor instead.
func (*StandardDeviation) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{26}
}

func (x *StandardDeviation) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *StandardDeviation) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type Sum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string  `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Where  *string `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
}

func (x *Sum) Reset() {
	*x = Sum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sum) ProtoMessage() {}

func (x *Sum) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sum.ProtoReflect.Descriptor instead.
func (*Sum) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{27}
}

func (x *Sum) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Sum) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

type UniqueValueRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []string         `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Where   *string          `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
	Options *AnalyzerOptions `protobuf:"bytes,3,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *UniqueValueRatio) Reset() {
	*x = UniqueValueRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueValueRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueValueRatio) ProtoMessage() {}

func (x *UniqueValueRatio) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueValueRatio.ProtoReflect.Descriptor instead.
func (*UniqueValueRatio) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{28}
}

func (x *UniqueValueRatio) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *UniqueValueRatio) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *UniqueValueRatio) GetOptions() *AnalyzerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Uniqueness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []string         `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Where   *string          `protobuf:"bytes,2,opt,name=where,proto3,oneof" json:"where,omitempty"`
	Options *AnalyzerOptions `protobuf:"bytes,3,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *Uniqueness) Reset() {
	*x = Uniqueness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uniqueness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uniqueness) ProtoMessage() {}

func (x *Uniqueness) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uniqueness.ProtoReflect.Descriptor instead.
func (*Uniqueness) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{29}
}

func (x *Uniqueness) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Uniqueness) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *Uniqueness) GetOptions() *AnalyzerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type KLLSketch_KLLParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SketchSize      int32   `protobuf:"varint,1,opt,name=sketch_size,json=sketchSize,proto3" json:"sketch_size,omitempty"`
	ShrinkingFactor float64 `protobuf:"fixed64,2,opt,name=shrinking_factor,json=shrinkingFactor,proto3" json:"shrinking_factor,omitempty"`
	NumberOfBuckets int32   `protobuf:"varint,3,opt,name=number_of_buckets,json=numberOfBuckets,proto3" json:"number_of_buckets,omitempty"`
}

func (x *KLLSketch_KLLParameters) Reset() {
	*x = KLLSketch_KLLParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzers_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KLLSketch_KLLParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KLLSketch_KLLParameters) ProtoMessage() {}

func (x *KLLSketch_KLLParameters) ProtoReflect() protoreflect.Message {
	mi := &file_analyzers_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KLLSketch_KLLParameters.ProtoReflect.Descriptor instead.
func (*KLLSketch_KLLParameters) Descriptor() ([]byte, []int) {
	return file_analyzers_proto_rawDescGZIP(), []int{16, 0}
}

func (x *KLLSketch_KLLParameters) GetSketchSize() int32 {
	if x != nil {
		return x.SketchSize
	}
	return 0
}

func (x *KLLSketch_KLLParameters) GetShrinkingFactor() float64 {
	if x != nil {
		return x.ShrinkingFactor
	}
	return 0
}

func (x *KLLSketch_KLLParameters) GetNumberOfBuckets() int32 {
	if x != nil {
		return x.NumberOfBuckets
	}
	return 0
}

var File_analyzers_proto protoreflect.FileDescriptor

var file_analyzers_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x0f, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68,
	0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e,
	0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x73, 0x71, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x71, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x53, 0x71, 0x6c, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x39, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e,
	0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x65,
	0x78, 0x61, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68,
	0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x61, 0x63, 0x74,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52,
	0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x0a, 0x6b, 0x6c,
	0x6c, 0x5f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x4c, 0x4c, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x48,
	0x00, 0x52, 0x09, 0x6b, 0x6c, 0x6c, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x61,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73,
	0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39, 0x0a,
	0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x58, 0x0a, 0x12, 0x6d, 0x75, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63,
	0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x75,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x11, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x47, 0x0a,
	0x0d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x6d, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63,
	0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x4f, 0x66, 0x53, 0x75, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x4f, 0x66, 0x53, 0x75, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63,
	0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x7a, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63,
	0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75,
	0x6d, 0x12, 0x56, 0x0a, 0x12, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x42, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x22, 0xbb, 0x02, 0x0a, 0x0f, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a,
	0x0e, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e,
	0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x52, 0x0d, 0x6e, 0x75, 0x6c, 0x6c,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12, 0x6a, 0x0a, 0x14, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73,
	0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x0d, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x22, 0x28, 0x0a,
	0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x22, 0x52, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c,
	0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68,
	0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0xd7, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7a, 0x0a, 0x0b, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19,
	0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x22, 0x29, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x2d,
	0x0a, 0x09, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x71, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x47, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x4d, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x46, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x68, 0x0a,
	0x0d, 0x45, 0x78, 0x61, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2b, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x73, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x19, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x41, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x12, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73,
	0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x11, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x10, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x09, 0x4b, 0x4c, 0x4c, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x59, 0x0a, 0x0e, 0x6b, 0x6c, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x4c, 0x4c, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x2e, 0x4b, 0x4c, 0x4c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x6b, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x1a, 0x87, 0x01, 0x0a, 0x0d, 0x4b, 0x4c, 0x4c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6b, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x9a, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e,
	0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x98, 0x01, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x04, 0x4d, 0x65, 0x61, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x9a, 0x01, 0x0a,
	0x09, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x07, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a,
	0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x11, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73,
	0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x72, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4f, 0x66, 0x53, 0x75, 0x6d,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x2b, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x22, 0x50, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x42, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63,
	0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x9d, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e, 0x63,
	0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0xae, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x73, 0x69, 0x6e,
	0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0d,
	0x74, 0x73, 0x75, 0x6d, 0x75, 0x67, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa0, 0x01, 0x01,
	0xa2, 0x02, 0x03, 0x43, 0x53, 0x50, 0xaa, 0x02, 0x14, 0x43, 0x6f, 0x6d, 0x2e, 0x53, 0x73, 0x69,
	0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xca, 0x02, 0x14,
	0x43, 0x6f, 0x6d, 0x5c, 0x53, 0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x5c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0xe2, 0x02, 0x20, 0x43, 0x6f, 0x6d, 0x5c, 0x53, 0x73, 0x69, 0x6e, 0x63,
	0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x43, 0x6f, 0x6d, 0x3a, 0x3a, 0x53,
	0x73, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_analyzers_proto_rawDescOnce sync.Once
	file_analyzers_proto_rawDescData = file_analyzers_proto_rawDesc
)

func file_analyzers_proto_rawDescGZIP() []byte {
	file_analyzers_proto_rawDescOnce.Do(func() {
		file_analyzers_proto_rawDescData = protoimpl.X.CompressGZIP(file_analyzers_proto_rawDescData)
	})
	return file_analyzers_proto_rawDescData
}

var file_analyzers_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_analyzers_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_analyzers_proto_goTypes = []any{
	(AnalyzerOptions_NullBehaviour)(0),      // 0: com.ssinchenko.proto.AnalyzerOptions.NullBehaviour
	(AnalyzerOptions_FilteredRowOutcome)(0), // 1: com.ssinchenko.proto.AnalyzerOptions.FilteredRowOutcome
	(Histogram_AggregateFunction)(0),        // 2: com.ssinchenko.proto.Histogram.AggregateFunction
	(*Analyzer)(nil),                        // 3: com.ssinchenko.proto.Analyzer
	(*AnalyzerOptions)(nil),                 // 4: com.ssinchenko.proto.AnalyzerOptions
	(*ApproxCountDistinct)(nil),             // 5: com.ssinchenko.proto.ApproxCountDistinct
	(*ApproxQuantile)(nil),                  // 6: com.ssinchenko.proto.ApproxQuantile
	(*ApproxQuantiles)(nil),                 // 7: com.ssinchenko.proto.ApproxQuantiles
	(*ColumnCount)(nil),                     // 8: com.ssinchenko.proto.ColumnCount
	(*Completeness)(nil),                    // 9: com.ssinchenko.proto.Completeness
	(*Compliance)(nil),                      // 10: com.ssinchenko.proto.Compliance
	(*Correlation)(nil),                     // 11: com.ssinchenko.proto.Correlation
	(*CountDistinct)(nil),                   // 12: com.ssinchenko.proto.CountDistinct
	(*CustomSql)(nil),                       // 13: com.ssinchenko.proto.CustomSql
	(*DataType)(nil),                        // 14: com.ssinchenko.proto.DataType
	(*Distinctness)(nil),                    // 15: com.ssinchenko.proto.Distinctness
	(*Entropy)(nil),                         // 16: com.ssinchenko.proto.Entropy
	(*ExactQuantile)(nil),                   // 17: com.ssinchenko.proto.ExactQuantile
	(*Histogram)(nil),                       // 18: com.ssinchenko.proto.Histogram
	(*KLLSketch)(nil),                       // 19: com.ssinchenko.proto.KLLSketch
	(*MaxLength)(nil),                       // 20: com.ssinchenko.proto.MaxLength
	(*Maximum)(nil),                         // 21: com.ssinchenko.proto.Maximum
	(*Mean)(nil),                            // 22: com.ssinchenko.proto.Mean
	(*MinLength)(nil),                       // 23: com.ssinchenko.proto.MinLength
	(*Minimum)(nil),                         // 24: com.ssinchenko.proto.Minimum
	(*MutualInformation)(nil),               // 25: com.ssinchenko.proto.MutualInformation
	(*PatternMatch)(nil),                    // 26: com.ssinchenko.proto.PatternMatch
	(*RatioOfSums)(nil),                     // 27: com.ssinchenko.proto.RatioOfSums
	(*Size)(nil),                            // 28: com.ssinchenko.proto.Size
	(*StandardDeviation)(nil),               // 29: com.ssinchenko.proto.StandardDeviation
	(*Sum)(nil),                             // 30: com.ssinchenko.proto.Sum
	(*UniqueValueRatio)(nil),                // 31: com.ssinchenko.proto.UniqueValueRatio
	(*Uniqueness)(nil),                      // 32: com.ssinchenko.proto.Uniqueness
	(*KLLSketch_KLLParameters)(nil),         // 33: com.ssinchenko.proto.KLLSketch.KLLParameters
}
var file_analyzers_proto_depIdxs = []int32{
	5,  // 0: com.ssinchenko.proto.Analyzer.approx_count_distinct:type_name -> com.ssinchenko.proto.ApproxCountDistinct
	6,  // 1: com.ssinchenko.proto.Analyzer.approx_quantile:type_name -> com.ssinchenko.proto.ApproxQuantile
	7,  // 2: com.ssinchenko.proto.Analyzer.approx_quantiles:type_name -> com.ssinchenko.proto.ApproxQuantiles
	8,  // 3: com.ssinchenko.proto.Analyzer.column_count:type_name -> com.ssinchenko.proto.ColumnCount
	9,  // 4: com.ssinchenko.proto.Analyzer.completeness:type_name -> com.ssinchenko.proto.Completeness
	10, // 5: com.ssinchenko.proto.Analyzer.compliance:type_name -> com.ssinchenko.proto.Compliance
	11, // 6: com.ssinchenko.proto.Analyzer.correlation:type_name -> com.ssinchenko.proto.Correlation
	12, // 7: com.ssinchenko.proto.Analyzer.count_distinct:type_name -> com.ssinchenko.proto.CountDistinct
	13, // 8: com.ssinchenko.proto.Analyzer.custom_sql:type_name -> com.ssinchenko.proto.CustomSql
	14, // 9: com.ssinchenko.proto.Analyzer.data_type:type_name -> com.ssinchenko.proto.DataType
	15, // 10: com.ssinchenko.proto.Analyzer.distinctness:type_name -> com.ssinchenko.proto.Distinctness
	16, // 11: com.ssinchenko.proto.Analyzer.entropy:type_name -> com.ssinchenko.proto.Entropy
	17, // 12: com.ssinchenko.proto.Analyzer.exact_quantile:type_name -> com.ssinchenko.proto.ExactQuantile
	18, // 13: com.ssinchenko.proto.Analyzer.histogram:type_name -> com.ssinchenko.proto.Histogram
	19, // 14: com.ssinchenko.proto.Analyzer.kll_sketch:type_name -> com.ssinchenko.proto.KLLSketch
	20, // 15: com.ssinchenko.proto.Analyzer.max_length:type_name -> com.ssinchenko.proto.MaxLength
	21, // 16: com.ssinchenko.proto.Analyzer.maximum:type_name -> com.ssinchenko.proto.Maximum
	22, // 17: com.ssinchenko.proto.Analyzer.mean:type_name -> com.ssinchenko.proto.Mean
	23, // 18: com.ssinchenko.proto.Analyzer.min_length:type_name -> com.ssinchenko.proto.MinLength
	24, // 19: com.ssinchenko.proto.Analyzer.minimum:type_name -> com.ssinchenko.proto.Minimum
	25, // 20: com.ssinchenko.proto.Analyzer.mutual_information:type_name -> com.ssinchenko.proto.MutualInformation
	26, // 21: com.ssinchenko.proto.Analyzer.pattern_match:type_name -> com.ssinchenko.proto.PatternMatch
	27, // 22: com.ssinchenko.proto.Analyzer.ratio_of_sums:type_name -> com.ssinchenko.proto.RatioOfSums
	28, // 23: com.ssinchenko.proto.Analyzer.size:type_name -> com.ssinchenko.proto.Size
	29, // 24: com.ssinchenko.proto.Analyzer.standard_deviation:type_name -> com.ssinchenko.proto.StandardDeviation
	30, // 25: com.ssinchenko.proto.Analyzer.sum:type_name -> com.ssinchenko.proto.Sum
	31, // 26: com.ssinchenko.proto.Analyzer.unique_value_ratio:type_name -> com.ssinchenko.proto.UniqueValueRatio
	32, // 27: com.ssinchenko.proto.Analyzer.uniqueness:type_name -> com.ssinchenko.proto.Uniqueness
	0,  // 28: com.ssinchenko.proto.AnalyzerOptions.null_behaviour:type_name -> com.ssinchenko.proto.AnalyzerOptions.NullBehaviour
	1,  // 29: com.ssinchenko.proto.AnalyzerOptions.filtered_row_outcome:type_name -> com.ssinchenko.proto.AnalyzerOptions.FilteredRowOutcome
	4,  // 30: com.ssinchenko.proto.Completeness.options:type_name -> com.ssinchenko.proto.AnalyzerOptions
	4,  // 31: com.ssinchenko.proto.Compliance.options:type_name -> com.ssinchenko.proto.AnalyzerOptions
	2,  // 32: com.ssinchenko.proto.Histogram.aggregate_function:type_name -> com.ssinchenko.proto.Histogram.AggregateFunction
	33, // 33: com.ssinchenko.proto.KLLSketch.kll_parameters:type_name -> com.ssinchenko.proto.KLLSketch.KLLParameters
	4,  // 34: com.ssinchenko.proto.MaxLength.options:type_name -> com.ssinchenko.proto.AnalyzerOptions
	4,  // 35: com.ssinchenko.proto.Maximum.options:type_name -> com.ssinchenko.proto.AnalyzerOptions
	4,  // 36: com.ssinchenko.proto.MinLength.options:type_name -> com.ssinchenko.proto.AnalyzerOptions
	4,  // 37: com.ssinchenko.proto.Minimum.options:type_name -> com.ssinchenko.proto.AnalyzerOptions
	4,  // 38: com.ssinchenko.proto.PatternMatch.options:type_name -> com.ssinchenko.proto.AnalyzerOptions
	4,  // 39: com.ssinchenko.proto.UniqueValueRatio.options:type_name -> com.ssinchenko.proto.AnalyzerOptions
	4,  // 40: com.ssinchenko.proto.Uniqueness.options:type_name -> com.ssinchenko.proto.AnalyzerOptions
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_analyzers_proto_init() }
func file_analyzers_proto_init() {
	if File_analyzers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analyzers_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Analyzer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AnalyzerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ApproxCountDistinct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ApproxQuantile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ApproxQuantiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ColumnCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Completeness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Compliance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Correlation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CountDistinct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CustomSql); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Distinctness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Entropy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ExactQuantile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Histogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*KLLSketch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MaxLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Maximum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Mean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MinLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Minimum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*MutualInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*PatternMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*RatioOfSums); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*StandardDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*Sum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UniqueValueRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Uniqueness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzers_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*KLLSketch_KLLParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_analyzers_proto_msgTypes[0].OneofWrappers = []any{
		(*Analyzer_ApproxCountDistinct)(nil),
		(*Analyzer_ApproxQuantile)(nil),
		(*Analyzer_ApproxQuantiles)(nil),
		(*Analyzer_ColumnCount)(nil),
		(*Analyzer_Completeness)(nil),
		(*Analyzer_Compliance)(nil),
		(*Analyzer_Correlation)(nil),
		(*Analyzer_CountDistinct)(nil),
		(*Analyzer_CustomSql)(nil),
		(*Analyzer_DataType)(nil),
		(*Analyzer_Distinctness)(nil),
		(*Analyzer_Entropy)(nil),
		(*Analyzer_ExactQuantile)(nil),
		(*Analyzer_Histogram)(nil),
		(*Analyzer_KllSketch)(nil),
		(*Analyzer_MaxLength)(nil),
		(*Analyzer_Maximum)(nil),
		(*Analyzer_Mean)(nil),
		(*Analyzer_MinLength)(nil),
		(*Analyzer_Minimum)(nil),
		(*Analyzer_MutualInformation)(nil),
		(*Analyzer_PatternMatch)(nil),
		(*Analyzer_RatioOfSums)(nil),
		(*Analyzer_Size)(nil),
		(*Analyzer_StandardDeviation)(nil),
		(*Analyzer_Sum)(nil),
		(*Analyzer_UniqueValueRatio)(nil),
		(*Analyzer_Uniqueness)(nil),
	}
	file_analyzers_proto_msgTypes[2].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[3].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[4].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[6].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[7].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[8].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[11].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[12].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[13].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[14].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[15].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[16].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[17].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[18].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[19].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[20].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[21].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[22].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[23].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[24].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[25].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[26].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[27].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[28].OneofWrappers = []any{}
	file_analyzers_proto_msgTypes[29].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analyzers_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_analyzers_proto_goTypes,
		DependencyIndexes: file_analyzers_proto_depIdxs,
		EnumInfos:         file_analyzers_proto_enumTypes,
		MessageInfos:      file_analyzers_proto_msgTypes,
	}.Build()
	File_analyzers_proto = out.File
	file_analyzers_proto_rawDesc = nil
	file_analyzers_proto_goTypes = nil
	file_analyzers_proto_depIdxs = nil
}
